import 'package:flutter/material.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray5001,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: WidgetStateColor.resolveWith((states) {
          if (states.contains(WidgetState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: const BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.whiteA700,
      ),
      dividerTheme: DividerThemeData(
        thickness: 3,
        space: 3,
        color: appTheme.whiteA700,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 14,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 10,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 64,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 12,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 11,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.green700,
          fontSize: 8,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 16,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 14,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF045283),
    primaryContainer: Color(0XFFD4ECFF),

    // Error colors
    errorContainer: Color(0XFF1E1F20),
    onError: Color(0X33313131),
    onErrorContainer: Color(0XFF4EB9F8),

    // On colors(text colors)
    onPrimary: Color(0XFF030104),
    onPrimaryContainer: Color(0XFF2F2E41),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => const Color(0XFF000000);

  // Blue
  Color get blue100 => const Color(0XFFC6E7FF);
  Color get blue50 => const Color(0XFFDDF0FF);
  Color get blue200 => const Color(0XFF8FD3FB);
  Color get blue500 => const Color(0XFF2EA1FF);
  Color get blue600 => const Color(0XFF2B76E5);
  Color get blue10003 => const Color(0XFFCDE6FC);
  Color get blue20001 => const Color(0XFF90CAF9);

  // BlueGray
  Color get blueGray100 => const Color(0XFFD9D9D9);
  Color get blueGray300 => const Color(0XFF8A9CB4);
  Color get blueGray800 => const Color(0XFF3F3D56);
  Color get blueGray900 => const Color(0XFF263238);

  // DeepOrange
  Color get deepOrange100 => const Color(0XFFFFC3C3);

  // Gray
  Color get gray100 => const Color(0XFFF5F5F5);
  Color get gray50 => const Color(0XFFF5F9FF);
  Color get gray5001 => const Color(0XFFF3FAFF);
  Color get gray800 => const Color(0XFF4E4E4E);
  Color get gray900 => const Color(0XFF151515);

  // Green
  Color get green50 => const Color(0XFFDDFFE3);
  Color get green700 => const Color(0XFF1CB42B);
  Color get green5001 => const Color(0XFFE3FFE2);

  // Indigo
  Color get indigo5099 => const Color(0X99EBEBF5);

  // LightBlue
  Color get lightBlue300 => const Color(0XFF4DB8F8);
  Color get lightBlue800 => const Color(0XFF0170B8);
  Color get lightBlue900 => const Color(0XFF045284);

  // LightGreen
  Color get lightGreenA100 => const Color(0XFFAAFFA2);

  // Red
  Color get red100 => const Color(0XFFFFD9D9);
  Color get red500 => const Color(0XFFFF2D2D);

  // White
  Color get whiteA700 => const Color(0XFFFFFFFF);
  Color get blueA700 => const Color(0XFF045284);

  Color get primary => const Color(0XFF045283);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
